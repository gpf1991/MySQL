课程：MySQL关系型数据库
进度: day5

上次内容
1. 子查询：一个查询语句嵌套了另外一个查询
   select * from acct where balance > (
     select avg(balance) from acct
   )

2. 连接查询：多个表中查询数据，产生一个结果集
  - 当想查询的结果来自不同的表时，用到联合查询
  - 笛卡尔积：集合的乘积。在联合查询中，如果条件限定
    不恰当，查询结果容易产生笛卡尔积
  - 分类：内连接，外连接
    内连接：没有关联到的数据不显示
    外连接：
      左连接：以左表为主表，全部显示，右表来关联
      右连接：以右表为主表，全部显示，左表来关联

3. 权限管理
  - 用户类、库管理类、表管理类、数据操作类
  - 授权语法
     grant 权限列表 on 库.表
     to 用户@客户端
     [identified by '密码']
     [with grant option]

     权限：all privileges, select, insert, update...
     库.表：*.*,  bank.*, bank.acct
     客户端：%, localhost, xxx.xxx.xxx.xxx
  - 查看自己的权限：show grants
  - 查看其他用户权限：show grants for 用户@客户端
  - 吊销权限：revoke 权限列表 on 用户@客户端

4. 数据库事务
  - 执行一系列操作时，全都执行，全都不执行
    维护数据的一致性、完整性
  - 特征：原子性、一致性、隔离性、持久性
  - 事务操作语句：
    开启：start transaction
    提交：commit
    回滚：rollback

作业：
1. 查询所有状态为“退货”状态的订单的客户名称、电话
  select cust_name, cust_tel from customer
  where cust_id in (
     select distinct cust_id from orders 
     where status = '5'
  )

2. 连接查询
   订单编号 下单时间 客户编号 客户姓名 客户电话 地址
   
   select o.order_id, o.order_date, 
          c.cust_id, c.cust_name,
	  c.cust_tel, c.address
   from orders o, customers c
   where o.status = '2' -- 待送货
     and o.cust_id = c.cust_id

3. 创建eshop_admin用户，并且授予eshop库下所有表
   所有权限，任意客户端登录，设置密码
   grant all privileges on eshop.*
   to 'eshop_admin'@'%'
   identified by '123456'

4. 创建eshop_user用户，并且授予eshop库下所有表
   查询权限,任意客户端登录，设置密码
   grant select on eshop.*
   to 'eshop_user'@'%'
   identified by '123456'

今天的内容
1. 锁
  1）锁：对数据库的控制权
  2）目的：解决多个工作单元并发操作数据的正确性
  3）分类：
    a)锁类型
      - 读锁（共享锁）：加锁后，可以读取，但不能修改
      - 写锁（排它锁）：加锁后，不能进行读写

    b)锁粒度
      - 行级锁（细粒度）：锁定一行，并发效率高
        控制较为复杂，消耗资源多
      - 表级锁（粗粒度）：锁定整张表，并发效率低
        控制简单，消耗资源较少

2. 存储引擎
  1）什么是存储引擎：表的存储方式，包括：存储机制
     索引机制、锁定方式
  2）基本操作
    - 查看支持的存储引擎：show engines;
    - 查看某个表的存储引擎：show create table 表名
    - 建表时指定存储引擎
      create table t1(
        name varchar(32)
      ) engine=InnoDB;
    - 修改表的存储引擎：
      alter table t1 engine=MyISAM;

   3）常用存储引擎的特点
     a)InnoDB
       - 支持数据库事务、行锁定、支持外键(FK)
       - 共享表空间
         表名.frm: 表结构和索引
	 表名.ibd: 表记录

	 * 通过show global variables '%datadir%'
	   查看mysql表存储的文件目录
       - 适用场合
         更新密集操作的表，并发效率较高
	 要求支持数据库事务
	 要求支持外键约束
	 要求支持auto_increment字段

      b)MyISAM
        - 支持表级锁定、不支持事务、不支持外键
	  不支持行锁定，访问速度较快
	- 独享表空间
	  表名.frm: 表结构
	  表名.myd: 表数据
	  表名.myi: 表索引
        - 适用场合
	  查询操作较多
	  数据一致性要求较低（不支持事务）
	  没有外键约束

      c)Memory(内存表):
	- 表结构存储在磁盘上，数据存储在内存
	  访问速度很快
	- 文件：表名.frm   存储表结构
	- 服务（或机器）重启后，表中的数据丢失
	- 适用场合：
          数据量小、访问速度要求极快、访问频率高、
	  数据丢失后不会造成影响

3. E-R模型：实体关系模型
  a)实体(Entry): 现实中可以区分的事物称之为实体
  b)关系(Relationship): 实体之间的联系
    - 一对一
    - 一对多
    - 多对多
  c)属性：实体所具有的数据特征
  d)E-R图：用图形化方式，表达实体间的关系
    矩形：表示实体
    椭圆：实体的属性
    菱形：实体间的关系
      一对一：菱形左右各写一个1
      一对多：菱形左右分别用1，N来表示
      多对多：菱形左右分别用M, N来表示
  e）练习：画出客户-账户的E-R图（见ER图.pptx）

4. 使用Python访问MySQL
  1）pymysql库：Python语言访问MySQL接口
    - 安装：
      在线：sudo pip3 install pymysql
      离线：
        第一步：下载安装包，下载地址：
	        https://pypi.org/project/PyMySQL/
		PyMySQL-0.9.3.tar.gz
	第二步：解压包，并执行安装
	        tar -zxvf PyMySQL-0.9.3.tar.gz
		cd PyMySQL-0.9.3
		python3 setup.py install
    - 验证：进入Python交互模式，执行导入包操作
            import pymysql
	    如果不报错，则说明安装成功

  2）PyMySQL访问MySQL的流程
    第一步：导入pymysql模块
    第二步：建立到数据库服务器的连接，创建连接对象
    第三步：创建游标对象(cursor)，通过调用数据库连接
            对象获得游标
    第四步：利用cursor对象，执行SQL语句
    第五步：提交事务（如果需要）
    第六步：关闭游标对象
    第七步：关闭数据库连接对象
  
  3）PyMySQL模块的主要方法
    - connect:  连接数据库
        参数：host	服务器地址
	      port	服务器端口(省略连默认端)
	      user	用户名
	      passwd	密码
	      db	数据库名称
	      charset	指定编码格式

    - 连接对象支持的方法
       cursor()		获取游标
       commit()		提交事务
       rollback()	回滚事务
       close()		关闭游标

    - 游标对象支持的方法
       execute(sql)	执行SQL语句
       fetchall()	取得查询结果集中的所有数据
       fetchone()	取查询结果集中一笔数据
       fetchmany(size)	取得指定笔数数据
       close()		关闭游标对象

       属性：
       rowcount		返回修改影响的行数
  4）示例：
  示例1：查询
	# pymysql查询示例
	import pymysql
	from db_conf import * #导入配置

	#建立到数据库服务器的连接，创建连接对象
	conn = pymysql.connect(host, user, \
		       password, dbname)               

	#创建游标对象(cursor)，通过调用数据库连接
	#对象获得游标
	cursor = conn.cursor()

	#利用cursor对象，执行SQL语句
	sql = "select * from acct"
	cursor.execute(sql)  #执行SQL语句

	#取出查询结果,并打印
	result = cursor.fetchall() #result是元组
	for r in result: #遍历result
	    acct_no = r[0] #账号
	    acct_name = r[1] #户名
	    if r[6]: #判断是否为空值
		balance = float(r[6]) #余额
	    else:
		balance = 0.00 #余额为空设置为0
	    print("账号:%s, 户名:%s, 余额:%.2f" % \
		 (acct_no, acct_name, balance))
	#关闭游标对象
	cursor.close()
	#关闭数据库连接对象
	conn.close()
    
    示例2：插入
	# pymysql的插入示例
	import pymysql 
	from db_conf import * #导入配置

	try:        
	    conn = pymysql.connect(host, user, \
			   password, dbname)  #连接数据库 
	    cursor = conn.cursor()  #获取游标
	    #执行SQL语句
	    sql = '''insert into 
	      acct(acct_no, acct_name, cust_no, 
		   acct_type, reg_date, status, balance)
	      values('622345000010','Robert', 'C0010',
		   1, date(now()), 1, 33.00)'''    
	    print(sql)
	    cursor.execute(sql) #执行
	    conn.commit() #提交事务
	    print("Insert OK")
	except Exception as e:
	    print("数据库插入异常")
	    print(e)
	finally:
	    cursor.close() #关闭游标
	    conn.close() #关闭连接
       
    示例3：修改
	import pymysql 
	from db_conf import * #导入配置

	try:        
	    conn = pymysql.connect(host, user, \
			   password, dbname)  #连接数据库 
	    cursor = conn.cursor()  #获取游标
	    #执行SQL语句
	    sql = '''update acct 
		     set balance = balance + 1000
		    where acct_no='622345000010'
	    '''    
	    cursor.execute(sql) #执行
	    conn.commit() #提交事务
	    print("修改笔数:%d" % cursor.rowcount)
	except Exception as e:
	    print("数据库修改异常")
	    print(e)
	finally:
	    cursor.close() #关闭游标
	    conn.close() #关闭连接

    示例4：删除
	# pymysql删除示例
	import pymysql 
	from db_conf import * #导入配置

	try:        
	    conn = pymysql.connect(host, user, \
			   password, dbname)  #连接数据库 
	    cursor = conn.cursor()  #获取游标
	    #执行SQL语句
	    sql = '''delete from acct 
		where acct_no='622345000010'
	    '''    
	    cursor.execute(sql) #执行
	    conn.commit() #提交事务
	    print("删除笔数:%d" % cursor.rowcount)
	except Exception as e:
	    print("数据库删除异常")
	    print(e)
	finally:
	    cursor.close() #关闭游标
	    conn.close() #关闭连接

课堂作业：账户管理修改、删除功能添加上
         
5. SQL语句优化
  1）在经常查询、排序的字段上建立索引
  2）尽量少使用不等于条件判断，不等于会放弃使用索引
  3）少使用null值判断，null值判断会放弃使用索引
  4）条件判断少使用or连接，in，not in
  5）模糊查询避免%前置
  6）查询时如果select *，直接写成字段名会提高效率
  7）尽量少在where子句中，使用字段进行运算。例如：
     select * from acct where balance / 2 > 5000
  8）数值类型的字段，进行条件比较时，一般比
     字符串比较效率更高

 作业：完善账户管理系统的修改、删除功能
       账户管理系统启动时，增加登录功能
       （原理：打印菜单前，先输入用户名、密码
         并到数据库自建的用户表中查询
	 如果用户名、密码匹配，则登录成功）


  